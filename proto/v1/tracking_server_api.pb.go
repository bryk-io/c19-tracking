// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/v1/tracking_server_api.proto

package protov1

import (
	bytes "bytes"
	context "context"
	fmt "fmt"
	_ "github.com/gogo/googleapis/google/api"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type PingResponse struct {
	// Whether the service is reachable and healthy.
	Ok                   bool     `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PingResponse) Reset()      { *m = PingResponse{} }
func (*PingResponse) ProtoMessage() {}
func (*PingResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f1f8a97bd56b0960, []int{0}
}
func (m *PingResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PingResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PingResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PingResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PingResponse.Merge(m, src)
}
func (m *PingResponse) XXX_Size() int {
	return m.Size()
}
func (m *PingResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PingResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PingResponse proto.InternalMessageInfo

func (m *PingResponse) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

type ActivationCodeRequest struct {
	// Identifier.
	Did string `protobuf:"bytes,1,opt,name=did,proto3" json:"did,omitempty"`
	// Account role.
	Role                 string   `protobuf:"bytes,2,opt,name=role,proto3" json:"role,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ActivationCodeRequest) Reset()      { *m = ActivationCodeRequest{} }
func (*ActivationCodeRequest) ProtoMessage() {}
func (*ActivationCodeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f1f8a97bd56b0960, []int{1}
}
func (m *ActivationCodeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActivationCodeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActivationCodeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActivationCodeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActivationCodeRequest.Merge(m, src)
}
func (m *ActivationCodeRequest) XXX_Size() int {
	return m.Size()
}
func (m *ActivationCodeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ActivationCodeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ActivationCodeRequest proto.InternalMessageInfo

func (m *ActivationCodeRequest) GetDid() string {
	if m != nil {
		return m.Did
	}
	return ""
}

func (m *ActivationCodeRequest) GetRole() string {
	if m != nil {
		return m.Role
	}
	return ""
}

type ActivationCodeResponse struct {
	// Activation code generated.
	ActivationCode       string   `protobuf:"bytes,1,opt,name=activation_code,json=activationCode,proto3" json:"activation_code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ActivationCodeResponse) Reset()      { *m = ActivationCodeResponse{} }
func (*ActivationCodeResponse) ProtoMessage() {}
func (*ActivationCodeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f1f8a97bd56b0960, []int{2}
}
func (m *ActivationCodeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActivationCodeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActivationCodeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActivationCodeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActivationCodeResponse.Merge(m, src)
}
func (m *ActivationCodeResponse) XXX_Size() int {
	return m.Size()
}
func (m *ActivationCodeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ActivationCodeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ActivationCodeResponse proto.InternalMessageInfo

func (m *ActivationCodeResponse) GetActivationCode() string {
	if m != nil {
		return m.ActivationCode
	}
	return ""
}

type CredentialsRequest struct {
	// Identifier.
	Did string `protobuf:"bytes,1,opt,name=did,proto3" json:"did,omitempty"`
	// Account role.
	Role string `protobuf:"bytes,2,opt,name=role,proto3" json:"role,omitempty"`
	// Activation code previously obtained from the server.
	ActivationCode string `protobuf:"bytes,3,opt,name=activation_code,json=activationCode,proto3" json:"activation_code,omitempty"`
	// LD document containing a signed activation code.
	Proof                []byte   `protobuf:"bytes,4,opt,name=proof,proto3" json:"proof,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CredentialsRequest) Reset()      { *m = CredentialsRequest{} }
func (*CredentialsRequest) ProtoMessage() {}
func (*CredentialsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f1f8a97bd56b0960, []int{3}
}
func (m *CredentialsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CredentialsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CredentialsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CredentialsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CredentialsRequest.Merge(m, src)
}
func (m *CredentialsRequest) XXX_Size() int {
	return m.Size()
}
func (m *CredentialsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CredentialsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CredentialsRequest proto.InternalMessageInfo

func (m *CredentialsRequest) GetDid() string {
	if m != nil {
		return m.Did
	}
	return ""
}

func (m *CredentialsRequest) GetRole() string {
	if m != nil {
		return m.Role
	}
	return ""
}

func (m *CredentialsRequest) GetActivationCode() string {
	if m != nil {
		return m.ActivationCode
	}
	return ""
}

func (m *CredentialsRequest) GetProof() []byte {
	if m != nil {
		return m.Proof
	}
	return nil
}

type RenewCredentialsRequest struct {
	// Obtained when initially requesting the credential if it is renewable.
	RefreshCode          string   `protobuf:"bytes,1,opt,name=refresh_code,json=refreshCode,proto3" json:"refresh_code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RenewCredentialsRequest) Reset()      { *m = RenewCredentialsRequest{} }
func (*RenewCredentialsRequest) ProtoMessage() {}
func (*RenewCredentialsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f1f8a97bd56b0960, []int{4}
}
func (m *RenewCredentialsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RenewCredentialsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RenewCredentialsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RenewCredentialsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RenewCredentialsRequest.Merge(m, src)
}
func (m *RenewCredentialsRequest) XXX_Size() int {
	return m.Size()
}
func (m *RenewCredentialsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RenewCredentialsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RenewCredentialsRequest proto.InternalMessageInfo

func (m *RenewCredentialsRequest) GetRefreshCode() string {
	if m != nil {
		return m.RefreshCode
	}
	return ""
}

type CredentialsResponse struct {
	// Bearer credentials in the form of a JWT.
	AccessToken string `protobuf:"bytes,1,opt,name=access_token,json=accessToken,proto3" json:"access_token,omitempty"`
	// Set if the credential is refreshable. This code can be used
	// to obtain a new access token to replace an expired one.
	RefreshCode          string   `protobuf:"bytes,2,opt,name=refresh_code,json=refreshCode,proto3" json:"refresh_code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CredentialsResponse) Reset()      { *m = CredentialsResponse{} }
func (*CredentialsResponse) ProtoMessage() {}
func (*CredentialsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f1f8a97bd56b0960, []int{5}
}
func (m *CredentialsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CredentialsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CredentialsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CredentialsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CredentialsResponse.Merge(m, src)
}
func (m *CredentialsResponse) XXX_Size() int {
	return m.Size()
}
func (m *CredentialsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CredentialsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CredentialsResponse proto.InternalMessageInfo

func (m *CredentialsResponse) GetAccessToken() string {
	if m != nil {
		return m.AccessToken
	}
	return ""
}

func (m *CredentialsResponse) GetRefreshCode() string {
	if m != nil {
		return m.RefreshCode
	}
	return ""
}

type RecordRequest struct {
	// New location records to process.
	Records              []*LocationRecord `protobuf:"bytes,1,rep,name=records,proto3" json:"records,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *RecordRequest) Reset()      { *m = RecordRequest{} }
func (*RecordRequest) ProtoMessage() {}
func (*RecordRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f1f8a97bd56b0960, []int{6}
}
func (m *RecordRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RecordRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RecordRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RecordRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecordRequest.Merge(m, src)
}
func (m *RecordRequest) XXX_Size() int {
	return m.Size()
}
func (m *RecordRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RecordRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RecordRequest proto.InternalMessageInfo

func (m *RecordRequest) GetRecords() []*LocationRecord {
	if m != nil {
		return m.Records
	}
	return nil
}

type RecordResponse struct {
	// Whether the record(s) request was successfully received
	// and handled.
	Ok                   bool     `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RecordResponse) Reset()      { *m = RecordResponse{} }
func (*RecordResponse) ProtoMessage() {}
func (*RecordResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f1f8a97bd56b0960, []int{7}
}
func (m *RecordResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RecordResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RecordResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RecordResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecordResponse.Merge(m, src)
}
func (m *RecordResponse) XXX_Size() int {
	return m.Size()
}
func (m *RecordResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RecordResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RecordResponse proto.InternalMessageInfo

func (m *RecordResponse) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

type NewIdentifierRequest struct {
	// DID method to use for the generated identifier.
	Method string `protobuf:"bytes,1,opt,name=method,proto3" json:"method,omitempty"`
	// Whether to automatically publish the identifier once
	// generated.
	AutoPublish          bool     `protobuf:"varint,2,opt,name=auto_publish,json=autoPublish,proto3" json:"auto_publish,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NewIdentifierRequest) Reset()      { *m = NewIdentifierRequest{} }
func (*NewIdentifierRequest) ProtoMessage() {}
func (*NewIdentifierRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f1f8a97bd56b0960, []int{8}
}
func (m *NewIdentifierRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewIdentifierRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewIdentifierRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewIdentifierRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewIdentifierRequest.Merge(m, src)
}
func (m *NewIdentifierRequest) XXX_Size() int {
	return m.Size()
}
func (m *NewIdentifierRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NewIdentifierRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NewIdentifierRequest proto.InternalMessageInfo

func (m *NewIdentifierRequest) GetMethod() string {
	if m != nil {
		return m.Method
	}
	return ""
}

func (m *NewIdentifierRequest) GetAutoPublish() bool {
	if m != nil {
		return m.AutoPublish
	}
	return false
}

type NewIdentifierResponse struct {
	// Base64-encoded DID document.
	Document             string   `protobuf:"bytes,1,opt,name=document,proto3" json:"document,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NewIdentifierResponse) Reset()      { *m = NewIdentifierResponse{} }
func (*NewIdentifierResponse) ProtoMessage() {}
func (*NewIdentifierResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f1f8a97bd56b0960, []int{9}
}
func (m *NewIdentifierResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewIdentifierResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewIdentifierResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewIdentifierResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewIdentifierResponse.Merge(m, src)
}
func (m *NewIdentifierResponse) XXX_Size() int {
	return m.Size()
}
func (m *NewIdentifierResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_NewIdentifierResponse.DiscardUnknown(m)
}

var xxx_messageInfo_NewIdentifierResponse proto.InternalMessageInfo

func (m *NewIdentifierResponse) GetDocument() string {
	if m != nil {
		return m.Document
	}
	return ""
}

func init() {
	proto.RegisterType((*PingResponse)(nil), "bryk.covid.proto.v1.PingResponse")
	proto.RegisterType((*ActivationCodeRequest)(nil), "bryk.covid.proto.v1.ActivationCodeRequest")
	proto.RegisterType((*ActivationCodeResponse)(nil), "bryk.covid.proto.v1.ActivationCodeResponse")
	proto.RegisterType((*CredentialsRequest)(nil), "bryk.covid.proto.v1.CredentialsRequest")
	proto.RegisterType((*RenewCredentialsRequest)(nil), "bryk.covid.proto.v1.RenewCredentialsRequest")
	proto.RegisterType((*CredentialsResponse)(nil), "bryk.covid.proto.v1.CredentialsResponse")
	proto.RegisterType((*RecordRequest)(nil), "bryk.covid.proto.v1.RecordRequest")
	proto.RegisterType((*RecordResponse)(nil), "bryk.covid.proto.v1.RecordResponse")
	proto.RegisterType((*NewIdentifierRequest)(nil), "bryk.covid.proto.v1.NewIdentifierRequest")
	proto.RegisterType((*NewIdentifierResponse)(nil), "bryk.covid.proto.v1.NewIdentifierResponse")
}

func init() { proto.RegisterFile("proto/v1/tracking_server_api.proto", fileDescriptor_f1f8a97bd56b0960) }

var fileDescriptor_f1f8a97bd56b0960 = []byte{
	// 781 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x53, 0x41, 0x6f, 0x12, 0x4f,
	0x1c, 0xfd, 0x0f, 0xf4, 0x4f, 0xeb, 0x40, 0xb1, 0x0e, 0x2d, 0xa5, 0x5b, 0xb3, 0x81, 0xa9, 0x49,
	0x11, 0x75, 0x09, 0xed, 0xc1, 0xa4, 0xb1, 0x87, 0x42, 0x3c, 0x34, 0x31, 0x0d, 0xae, 0x4d, 0x4d,
	0xb4, 0x09, 0x59, 0x76, 0x07, 0x98, 0x00, 0x3b, 0xeb, 0xee, 0x42, 0xd3, 0x5b, 0xe3, 0xcd, 0x44,
	0x13, 0x13, 0x4f, 0x5e, 0x3d, 0x19, 0x3f, 0x81, 0x47, 0x8f, 0xc6, 0x93, 0x89, 0x17, 0x8f, 0x85,
	0xf8, 0x01, 0x3c, 0x7a, 0x34, 0x3b, 0x3b, 0x8b, 0x40, 0xb7, 0xda, 0xde, 0x76, 0xde, 0xfc, 0x7e,
	0xef, 0xbd, 0x81, 0xf7, 0x20, 0xb6, 0x6c, 0xe6, 0xb2, 0x62, 0xbf, 0x54, 0x74, 0x6d, 0x4d, 0x6f,
	0x53, 0xb3, 0x59, 0x73, 0x88, 0xdd, 0x27, 0x76, 0x4d, 0xb3, 0xa8, 0xc2, 0x2f, 0x51, 0xaa, 0x6e,
	0x1f, 0xb7, 0x15, 0x9d, 0xf5, 0xa9, 0xe1, 0x23, 0x4a, 0xbf, 0x24, 0xdd, 0x6d, 0x52, 0xb7, 0xd5,
	0xab, 0x2b, 0x3a, 0xeb, 0x16, 0x9b, 0xac, 0xc9, 0x8a, 0x4d, 0xc6, 0x9a, 0x1d, 0xa2, 0x59, 0xd4,
	0x11, 0x9f, 0x45, 0xcd, 0xa2, 0x45, 0xcd, 0x34, 0x99, 0xab, 0xb9, 0x94, 0x99, 0x8e, 0xbf, 0x2b,
	0xdd, 0x99, 0x5e, 0xe4, 0x70, 0xbd, 0xd7, 0xe0, 0x27, 0xdf, 0x8e, 0xf7, 0x25, 0xc6, 0x57, 0x05,
	0xd9, 0x68, 0x8a, 0x74, 0x2d, 0xf7, 0x58, 0x5c, 0x2e, 0x8d, 0xdc, 0xfb, 0xa6, 0x7d, 0x18, 0xcb,
	0x30, 0x51, 0xa5, 0x66, 0x53, 0x25, 0x8e, 0xc5, 0x4c, 0x87, 0xa0, 0x24, 0x8c, 0xb0, 0x76, 0x06,
	0x64, 0x41, 0x7e, 0x4e, 0x8d, 0xb0, 0x36, 0xde, 0x86, 0x4b, 0x3b, 0xba, 0x4b, 0xfb, 0xdc, 0x57,
	0x85, 0x19, 0x44, 0x25, 0xcf, 0x7a, 0xc4, 0x71, 0xd1, 0x02, 0x8c, 0x1a, 0xd4, 0xe0, 0x93, 0x57,
	0x54, 0xef, 0x13, 0x21, 0x38, 0x63, 0xb3, 0x0e, 0xc9, 0x44, 0x38, 0xc4, 0xbf, 0xf1, 0x0e, 0x4c,
	0x4f, 0xaf, 0x0b, 0xa1, 0x75, 0x78, 0x55, 0x1b, 0xdd, 0xd4, 0x74, 0x66, 0x10, 0xc1, 0x95, 0xd4,
	0x26, 0x16, 0xf0, 0x31, 0x44, 0x15, 0x9b, 0x18, 0xc4, 0x74, 0xa9, 0xd6, 0x71, 0x2e, 0x25, 0x1f,
	0x26, 0x12, 0x0d, 0x13, 0x41, 0x8b, 0xf0, 0x7f, 0xcb, 0x66, 0xac, 0x91, 0x99, 0xc9, 0x82, 0x7c,
	0x42, 0xf5, 0x0f, 0xf8, 0x1e, 0x5c, 0x56, 0x89, 0x49, 0x8e, 0x42, 0xf4, 0x73, 0x30, 0x61, 0x93,
	0x86, 0x4d, 0x9c, 0xd6, 0xb8, 0xf7, 0xb8, 0xc0, 0xb8, 0xf1, 0xa7, 0x30, 0x35, 0xb1, 0x28, 0x1e,
	0x9e, 0x83, 0x09, 0x4d, 0xd7, 0x89, 0xe3, 0xd4, 0x5c, 0xd6, 0x26, 0x66, 0xb0, 0xe9, 0x63, 0xfb,
	0x1e, 0x74, 0x86, 0x3c, 0x72, 0x96, 0x7c, 0x0f, 0xce, 0xab, 0x44, 0x67, 0xb6, 0x11, 0x18, 0xda,
	0x86, 0xb3, 0x36, 0x07, 0x9c, 0x0c, 0xc8, 0x46, 0xf3, 0xf1, 0x8d, 0x35, 0x25, 0x24, 0x8b, 0xca,
	0x03, 0xa6, 0xf3, 0x57, 0x8b, 0xe5, 0x60, 0x07, 0x67, 0x61, 0x32, 0xe0, 0x3b, 0x27, 0x09, 0x0f,
	0xe1, 0xe2, 0x1e, 0x39, 0xda, 0xe5, 0xef, 0x69, 0x50, 0x62, 0x07, 0xc2, 0x69, 0x18, 0xeb, 0x12,
	0xb7, 0xc5, 0x82, 0x3f, 0x43, 0x9c, 0xf8, 0x3b, 0x7b, 0x2e, 0xab, 0x59, 0xbd, 0x7a, 0x87, 0x3a,
	0x2d, 0xfe, 0x88, 0x39, 0x35, 0xee, 0x61, 0x55, 0x1f, 0xc2, 0x9b, 0x70, 0x69, 0x8a, 0x52, 0x68,
	0x4b, 0x70, 0xce, 0x60, 0x7a, 0xaf, 0x4b, 0x4c, 0x57, 0xb0, 0x8e, 0xce, 0x1b, 0x2f, 0x63, 0xf0,
	0xda, 0xbe, 0x28, 0xe0, 0x23, 0x1e, 0xe5, 0x9d, 0xea, 0x2e, 0x7a, 0x0c, 0x67, 0xbc, 0x1c, 0xa3,
	0xb4, 0xe2, 0x97, 0x40, 0x09, 0x4a, 0xa0, 0xdc, 0xf7, 0x4a, 0x20, 0xe5, 0x42, 0x7f, 0x8d, 0xf1,
	0xe8, 0xe3, 0xc5, 0xe7, 0xdf, 0x7e, 0xbc, 0x89, 0x24, 0x51, 0xc2, 0x2b, 0x89, 0x57, 0x48, 0xcb,
	0x23, 0x7c, 0x05, 0x60, 0x72, 0x32, 0xc2, 0xa8, 0x10, 0xca, 0x15, 0x5a, 0x13, 0xe9, 0xd6, 0x85,
	0x66, 0x85, 0x03, 0xcc, 0x1d, 0x5c, 0xc7, 0xcb, 0x81, 0x83, 0xa9, 0xf0, 0x6e, 0x81, 0x02, 0x3a,
	0x01, 0x30, 0x3e, 0x16, 0x2b, 0xb4, 0x1e, 0x2a, 0x70, 0x36, 0xb1, 0x52, 0xfe, 0xdf, 0x83, 0xc2,
	0x86, 0xcc, 0x6d, 0x64, 0x70, 0x2a, 0xb0, 0xa1, 0xff, 0x19, 0xf2, 0x2c, 0xbc, 0x06, 0x70, 0x61,
	0xba, 0x17, 0xe8, 0x76, 0x28, 0xfd, 0x39, 0xf5, 0xb9, 0x84, 0x99, 0x1b, 0xdc, 0x8c, 0x8c, 0x57,
	0x42, 0xcc, 0xd4, 0x6c, 0x8f, 0xde, 0xb3, 0xd4, 0x81, 0x31, 0x3f, 0xbe, 0x08, 0x9f, 0xe3, 0x63,
	0xac, 0x2b, 0xd2, 0xda, 0x5f, 0x67, 0x84, 0xf0, 0x0a, 0x17, 0x4e, 0xe1, 0x64, 0x20, 0xec, 0x57,
	0xc5, 0x53, 0x7b, 0x01, 0xe0, 0xfc, 0x44, 0x70, 0xd1, 0xcd, 0x50, 0xc6, 0xb0, 0xbe, 0x48, 0x85,
	0x8b, 0x8c, 0x0a, 0x0f, 0x39, 0xee, 0x61, 0x15, 0xa7, 0x03, 0x0f, 0x26, 0x39, 0xaa, 0xd1, 0xd1,
	0xdc, 0x16, 0x28, 0x94, 0xdf, 0x82, 0xef, 0x03, 0xf9, 0xbf, 0xd3, 0x81, 0x0c, 0x7e, 0x0e, 0x64,
	0xf0, 0x6b, 0x20, 0x83, 0x93, 0xa1, 0x0c, 0xde, 0x0f, 0x65, 0xf0, 0x71, 0x28, 0x83, 0x4f, 0x43,
	0x19, 0x7c, 0x1e, 0xca, 0xe0, 0xeb, 0x50, 0x06, 0xa7, 0x43, 0x19, 0xc0, 0x34, 0x65, 0x61, 0xfa,
	0xe5, 0xf4, 0x54, 0xa5, 0x2c, 0x5a, 0xf5, 0xae, 0xaa, 0xe0, 0xc9, 0x2c, 0x9f, 0xe9, 0x97, 0xde,
	0x45, 0xa2, 0xe5, 0x4a, 0xf5, 0x43, 0x24, 0x55, 0xf6, 0xd6, 0x2b, 0x7c, 0x9d, 0xcf, 0x28, 0x07,
	0xa5, 0x2f, 0x3e, 0x7a, 0xc8, 0xd1, 0x43, 0x8e, 0x1e, 0x1e, 0x94, 0xea, 0x31, 0xbe, 0xba, 0xf9,
	0x3b, 0x00, 0x00, 0xff, 0xff, 0x0e, 0x7f, 0xec, 0x59, 0x3a, 0x07, 0x00, 0x00,
}

func (this *PingResponse) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*PingResponse)
	if !ok {
		that2, ok := that.(PingResponse)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *PingResponse")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *PingResponse but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *PingResponse but is not nil && this == nil")
	}
	if this.Ok != that1.Ok {
		return fmt.Errorf("Ok this(%v) Not Equal that(%v)", this.Ok, that1.Ok)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *PingResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PingResponse)
	if !ok {
		that2, ok := that.(PingResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Ok != that1.Ok {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ActivationCodeRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*ActivationCodeRequest)
	if !ok {
		that2, ok := that.(ActivationCodeRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *ActivationCodeRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *ActivationCodeRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *ActivationCodeRequest but is not nil && this == nil")
	}
	if this.Did != that1.Did {
		return fmt.Errorf("Did this(%v) Not Equal that(%v)", this.Did, that1.Did)
	}
	if this.Role != that1.Role {
		return fmt.Errorf("Role this(%v) Not Equal that(%v)", this.Role, that1.Role)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *ActivationCodeRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ActivationCodeRequest)
	if !ok {
		that2, ok := that.(ActivationCodeRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Did != that1.Did {
		return false
	}
	if this.Role != that1.Role {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ActivationCodeResponse) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*ActivationCodeResponse)
	if !ok {
		that2, ok := that.(ActivationCodeResponse)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *ActivationCodeResponse")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *ActivationCodeResponse but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *ActivationCodeResponse but is not nil && this == nil")
	}
	if this.ActivationCode != that1.ActivationCode {
		return fmt.Errorf("ActivationCode this(%v) Not Equal that(%v)", this.ActivationCode, that1.ActivationCode)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *ActivationCodeResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ActivationCodeResponse)
	if !ok {
		that2, ok := that.(ActivationCodeResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ActivationCode != that1.ActivationCode {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *CredentialsRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*CredentialsRequest)
	if !ok {
		that2, ok := that.(CredentialsRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *CredentialsRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *CredentialsRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *CredentialsRequest but is not nil && this == nil")
	}
	if this.Did != that1.Did {
		return fmt.Errorf("Did this(%v) Not Equal that(%v)", this.Did, that1.Did)
	}
	if this.Role != that1.Role {
		return fmt.Errorf("Role this(%v) Not Equal that(%v)", this.Role, that1.Role)
	}
	if this.ActivationCode != that1.ActivationCode {
		return fmt.Errorf("ActivationCode this(%v) Not Equal that(%v)", this.ActivationCode, that1.ActivationCode)
	}
	if !bytes.Equal(this.Proof, that1.Proof) {
		return fmt.Errorf("Proof this(%v) Not Equal that(%v)", this.Proof, that1.Proof)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *CredentialsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CredentialsRequest)
	if !ok {
		that2, ok := that.(CredentialsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Did != that1.Did {
		return false
	}
	if this.Role != that1.Role {
		return false
	}
	if this.ActivationCode != that1.ActivationCode {
		return false
	}
	if !bytes.Equal(this.Proof, that1.Proof) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *RenewCredentialsRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*RenewCredentialsRequest)
	if !ok {
		that2, ok := that.(RenewCredentialsRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *RenewCredentialsRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *RenewCredentialsRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *RenewCredentialsRequest but is not nil && this == nil")
	}
	if this.RefreshCode != that1.RefreshCode {
		return fmt.Errorf("RefreshCode this(%v) Not Equal that(%v)", this.RefreshCode, that1.RefreshCode)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *RenewCredentialsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RenewCredentialsRequest)
	if !ok {
		that2, ok := that.(RenewCredentialsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RefreshCode != that1.RefreshCode {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *CredentialsResponse) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*CredentialsResponse)
	if !ok {
		that2, ok := that.(CredentialsResponse)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *CredentialsResponse")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *CredentialsResponse but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *CredentialsResponse but is not nil && this == nil")
	}
	if this.AccessToken != that1.AccessToken {
		return fmt.Errorf("AccessToken this(%v) Not Equal that(%v)", this.AccessToken, that1.AccessToken)
	}
	if this.RefreshCode != that1.RefreshCode {
		return fmt.Errorf("RefreshCode this(%v) Not Equal that(%v)", this.RefreshCode, that1.RefreshCode)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *CredentialsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CredentialsResponse)
	if !ok {
		that2, ok := that.(CredentialsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AccessToken != that1.AccessToken {
		return false
	}
	if this.RefreshCode != that1.RefreshCode {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *RecordRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*RecordRequest)
	if !ok {
		that2, ok := that.(RecordRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *RecordRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *RecordRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *RecordRequest but is not nil && this == nil")
	}
	if len(this.Records) != len(that1.Records) {
		return fmt.Errorf("Records this(%v) Not Equal that(%v)", len(this.Records), len(that1.Records))
	}
	for i := range this.Records {
		if !this.Records[i].Equal(that1.Records[i]) {
			return fmt.Errorf("Records this[%v](%v) Not Equal that[%v](%v)", i, this.Records[i], i, that1.Records[i])
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *RecordRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RecordRequest)
	if !ok {
		that2, ok := that.(RecordRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Records) != len(that1.Records) {
		return false
	}
	for i := range this.Records {
		if !this.Records[i].Equal(that1.Records[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *RecordResponse) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*RecordResponse)
	if !ok {
		that2, ok := that.(RecordResponse)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *RecordResponse")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *RecordResponse but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *RecordResponse but is not nil && this == nil")
	}
	if this.Ok != that1.Ok {
		return fmt.Errorf("Ok this(%v) Not Equal that(%v)", this.Ok, that1.Ok)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *RecordResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RecordResponse)
	if !ok {
		that2, ok := that.(RecordResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Ok != that1.Ok {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *NewIdentifierRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*NewIdentifierRequest)
	if !ok {
		that2, ok := that.(NewIdentifierRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *NewIdentifierRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *NewIdentifierRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *NewIdentifierRequest but is not nil && this == nil")
	}
	if this.Method != that1.Method {
		return fmt.Errorf("Method this(%v) Not Equal that(%v)", this.Method, that1.Method)
	}
	if this.AutoPublish != that1.AutoPublish {
		return fmt.Errorf("AutoPublish this(%v) Not Equal that(%v)", this.AutoPublish, that1.AutoPublish)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *NewIdentifierRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NewIdentifierRequest)
	if !ok {
		that2, ok := that.(NewIdentifierRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Method != that1.Method {
		return false
	}
	if this.AutoPublish != that1.AutoPublish {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *NewIdentifierResponse) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*NewIdentifierResponse)
	if !ok {
		that2, ok := that.(NewIdentifierResponse)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *NewIdentifierResponse")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *NewIdentifierResponse but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *NewIdentifierResponse but is not nil && this == nil")
	}
	if this.Document != that1.Document {
		return fmt.Errorf("Document this(%v) Not Equal that(%v)", this.Document, that1.Document)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *NewIdentifierResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NewIdentifierResponse)
	if !ok {
		that2, ok := that.(NewIdentifierResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Document != that1.Document {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *PingResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&protov1.PingResponse{")
	s = append(s, "Ok: "+fmt.Sprintf("%#v", this.Ok)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ActivationCodeRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&protov1.ActivationCodeRequest{")
	s = append(s, "Did: "+fmt.Sprintf("%#v", this.Did)+",\n")
	s = append(s, "Role: "+fmt.Sprintf("%#v", this.Role)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ActivationCodeResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&protov1.ActivationCodeResponse{")
	s = append(s, "ActivationCode: "+fmt.Sprintf("%#v", this.ActivationCode)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CredentialsRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&protov1.CredentialsRequest{")
	s = append(s, "Did: "+fmt.Sprintf("%#v", this.Did)+",\n")
	s = append(s, "Role: "+fmt.Sprintf("%#v", this.Role)+",\n")
	s = append(s, "ActivationCode: "+fmt.Sprintf("%#v", this.ActivationCode)+",\n")
	s = append(s, "Proof: "+fmt.Sprintf("%#v", this.Proof)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RenewCredentialsRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&protov1.RenewCredentialsRequest{")
	s = append(s, "RefreshCode: "+fmt.Sprintf("%#v", this.RefreshCode)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CredentialsResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&protov1.CredentialsResponse{")
	s = append(s, "AccessToken: "+fmt.Sprintf("%#v", this.AccessToken)+",\n")
	s = append(s, "RefreshCode: "+fmt.Sprintf("%#v", this.RefreshCode)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RecordRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&protov1.RecordRequest{")
	if this.Records != nil {
		s = append(s, "Records: "+fmt.Sprintf("%#v", this.Records)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RecordResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&protov1.RecordResponse{")
	s = append(s, "Ok: "+fmt.Sprintf("%#v", this.Ok)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NewIdentifierRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&protov1.NewIdentifierRequest{")
	s = append(s, "Method: "+fmt.Sprintf("%#v", this.Method)+",\n")
	s = append(s, "AutoPublish: "+fmt.Sprintf("%#v", this.AutoPublish)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NewIdentifierResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&protov1.NewIdentifierResponse{")
	s = append(s, "Document: "+fmt.Sprintf("%#v", this.Document)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringTrackingServerApi(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TrackingServerAPIClient is the client API for TrackingServerAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TrackingServerAPIClient interface {
	// Reachability test.
	Ping(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*PingResponse, error)
	// Generate a new activation code.
	ActivationCode(ctx context.Context, in *ActivationCodeRequest, opts ...grpc.CallOption) (*ActivationCodeResponse, error)
	// Get access credentials for the platform.
	Credentials(ctx context.Context, in *CredentialsRequest, opts ...grpc.CallOption) (*CredentialsResponse, error)
	// Renew a previously-issued access credential.
	RenewCredentials(ctx context.Context, in *RenewCredentialsRequest, opts ...grpc.CallOption) (*CredentialsResponse, error)
	// Process location record events. A maximum value of 100 record
	// per-request is enforced.
	Record(ctx context.Context, in *RecordRequest, opts ...grpc.CallOption) (*RecordResponse, error)
	// Helper method to generate a new DID instances for clients that can't
	// generate it locally. This is not recommended but supported for legacy
	// and development purposes.
	NewIdentifier(ctx context.Context, in *NewIdentifierRequest, opts ...grpc.CallOption) (*NewIdentifierResponse, error)
}

type trackingServerAPIClient struct {
	cc *grpc.ClientConn
}

func NewTrackingServerAPIClient(cc *grpc.ClientConn) TrackingServerAPIClient {
	return &trackingServerAPIClient{cc}
}

func (c *trackingServerAPIClient) Ping(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, "/bryk.covid.proto.v1.TrackingServerAPI/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trackingServerAPIClient) ActivationCode(ctx context.Context, in *ActivationCodeRequest, opts ...grpc.CallOption) (*ActivationCodeResponse, error) {
	out := new(ActivationCodeResponse)
	err := c.cc.Invoke(ctx, "/bryk.covid.proto.v1.TrackingServerAPI/ActivationCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trackingServerAPIClient) Credentials(ctx context.Context, in *CredentialsRequest, opts ...grpc.CallOption) (*CredentialsResponse, error) {
	out := new(CredentialsResponse)
	err := c.cc.Invoke(ctx, "/bryk.covid.proto.v1.TrackingServerAPI/Credentials", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trackingServerAPIClient) RenewCredentials(ctx context.Context, in *RenewCredentialsRequest, opts ...grpc.CallOption) (*CredentialsResponse, error) {
	out := new(CredentialsResponse)
	err := c.cc.Invoke(ctx, "/bryk.covid.proto.v1.TrackingServerAPI/RenewCredentials", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trackingServerAPIClient) Record(ctx context.Context, in *RecordRequest, opts ...grpc.CallOption) (*RecordResponse, error) {
	out := new(RecordResponse)
	err := c.cc.Invoke(ctx, "/bryk.covid.proto.v1.TrackingServerAPI/Record", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trackingServerAPIClient) NewIdentifier(ctx context.Context, in *NewIdentifierRequest, opts ...grpc.CallOption) (*NewIdentifierResponse, error) {
	out := new(NewIdentifierResponse)
	err := c.cc.Invoke(ctx, "/bryk.covid.proto.v1.TrackingServerAPI/NewIdentifier", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TrackingServerAPIServer is the server API for TrackingServerAPI service.
type TrackingServerAPIServer interface {
	// Reachability test.
	Ping(context.Context, *types.Empty) (*PingResponse, error)
	// Generate a new activation code.
	ActivationCode(context.Context, *ActivationCodeRequest) (*ActivationCodeResponse, error)
	// Get access credentials for the platform.
	Credentials(context.Context, *CredentialsRequest) (*CredentialsResponse, error)
	// Renew a previously-issued access credential.
	RenewCredentials(context.Context, *RenewCredentialsRequest) (*CredentialsResponse, error)
	// Process location record events. A maximum value of 100 record
	// per-request is enforced.
	Record(context.Context, *RecordRequest) (*RecordResponse, error)
	// Helper method to generate a new DID instances for clients that can't
	// generate it locally. This is not recommended but supported for legacy
	// and development purposes.
	NewIdentifier(context.Context, *NewIdentifierRequest) (*NewIdentifierResponse, error)
}

// UnimplementedTrackingServerAPIServer can be embedded to have forward compatible implementations.
type UnimplementedTrackingServerAPIServer struct {
}

func (*UnimplementedTrackingServerAPIServer) Ping(ctx context.Context, req *types.Empty) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (*UnimplementedTrackingServerAPIServer) ActivationCode(ctx context.Context, req *ActivationCodeRequest) (*ActivationCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActivationCode not implemented")
}
func (*UnimplementedTrackingServerAPIServer) Credentials(ctx context.Context, req *CredentialsRequest) (*CredentialsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Credentials not implemented")
}
func (*UnimplementedTrackingServerAPIServer) RenewCredentials(ctx context.Context, req *RenewCredentialsRequest) (*CredentialsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenewCredentials not implemented")
}
func (*UnimplementedTrackingServerAPIServer) Record(ctx context.Context, req *RecordRequest) (*RecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Record not implemented")
}
func (*UnimplementedTrackingServerAPIServer) NewIdentifier(ctx context.Context, req *NewIdentifierRequest) (*NewIdentifierResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewIdentifier not implemented")
}

func RegisterTrackingServerAPIServer(s *grpc.Server, srv TrackingServerAPIServer) {
	s.RegisterService(&_TrackingServerAPI_serviceDesc, srv)
}

func _TrackingServerAPI_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrackingServerAPIServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bryk.covid.proto.v1.TrackingServerAPI/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrackingServerAPIServer).Ping(ctx, req.(*types.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrackingServerAPI_ActivationCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivationCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrackingServerAPIServer).ActivationCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bryk.covid.proto.v1.TrackingServerAPI/ActivationCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrackingServerAPIServer).ActivationCode(ctx, req.(*ActivationCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrackingServerAPI_Credentials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CredentialsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrackingServerAPIServer).Credentials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bryk.covid.proto.v1.TrackingServerAPI/Credentials",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrackingServerAPIServer).Credentials(ctx, req.(*CredentialsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrackingServerAPI_RenewCredentials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenewCredentialsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrackingServerAPIServer).RenewCredentials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bryk.covid.proto.v1.TrackingServerAPI/RenewCredentials",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrackingServerAPIServer).RenewCredentials(ctx, req.(*RenewCredentialsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrackingServerAPI_Record_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrackingServerAPIServer).Record(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bryk.covid.proto.v1.TrackingServerAPI/Record",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrackingServerAPIServer).Record(ctx, req.(*RecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrackingServerAPI_NewIdentifier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewIdentifierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrackingServerAPIServer).NewIdentifier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bryk.covid.proto.v1.TrackingServerAPI/NewIdentifier",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrackingServerAPIServer).NewIdentifier(ctx, req.(*NewIdentifierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TrackingServerAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bryk.covid.proto.v1.TrackingServerAPI",
	HandlerType: (*TrackingServerAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _TrackingServerAPI_Ping_Handler,
		},
		{
			MethodName: "ActivationCode",
			Handler:    _TrackingServerAPI_ActivationCode_Handler,
		},
		{
			MethodName: "Credentials",
			Handler:    _TrackingServerAPI_Credentials_Handler,
		},
		{
			MethodName: "RenewCredentials",
			Handler:    _TrackingServerAPI_RenewCredentials_Handler,
		},
		{
			MethodName: "Record",
			Handler:    _TrackingServerAPI_Record_Handler,
		},
		{
			MethodName: "NewIdentifier",
			Handler:    _TrackingServerAPI_NewIdentifier_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/v1/tracking_server_api.proto",
}

func (m *PingResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PingResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PingResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Ok {
		i--
		if m.Ok {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ActivationCodeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActivationCodeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActivationCodeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Role) > 0 {
		i -= len(m.Role)
		copy(dAtA[i:], m.Role)
		i = encodeVarintTrackingServerApi(dAtA, i, uint64(len(m.Role)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Did) > 0 {
		i -= len(m.Did)
		copy(dAtA[i:], m.Did)
		i = encodeVarintTrackingServerApi(dAtA, i, uint64(len(m.Did)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ActivationCodeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActivationCodeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActivationCodeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ActivationCode) > 0 {
		i -= len(m.ActivationCode)
		copy(dAtA[i:], m.ActivationCode)
		i = encodeVarintTrackingServerApi(dAtA, i, uint64(len(m.ActivationCode)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CredentialsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CredentialsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CredentialsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Proof) > 0 {
		i -= len(m.Proof)
		copy(dAtA[i:], m.Proof)
		i = encodeVarintTrackingServerApi(dAtA, i, uint64(len(m.Proof)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ActivationCode) > 0 {
		i -= len(m.ActivationCode)
		copy(dAtA[i:], m.ActivationCode)
		i = encodeVarintTrackingServerApi(dAtA, i, uint64(len(m.ActivationCode)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Role) > 0 {
		i -= len(m.Role)
		copy(dAtA[i:], m.Role)
		i = encodeVarintTrackingServerApi(dAtA, i, uint64(len(m.Role)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Did) > 0 {
		i -= len(m.Did)
		copy(dAtA[i:], m.Did)
		i = encodeVarintTrackingServerApi(dAtA, i, uint64(len(m.Did)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RenewCredentialsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RenewCredentialsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RenewCredentialsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.RefreshCode) > 0 {
		i -= len(m.RefreshCode)
		copy(dAtA[i:], m.RefreshCode)
		i = encodeVarintTrackingServerApi(dAtA, i, uint64(len(m.RefreshCode)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CredentialsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CredentialsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CredentialsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.RefreshCode) > 0 {
		i -= len(m.RefreshCode)
		copy(dAtA[i:], m.RefreshCode)
		i = encodeVarintTrackingServerApi(dAtA, i, uint64(len(m.RefreshCode)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.AccessToken) > 0 {
		i -= len(m.AccessToken)
		copy(dAtA[i:], m.AccessToken)
		i = encodeVarintTrackingServerApi(dAtA, i, uint64(len(m.AccessToken)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RecordRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecordRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RecordRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Records) > 0 {
		for iNdEx := len(m.Records) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Records[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTrackingServerApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RecordResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecordResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RecordResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Ok {
		i--
		if m.Ok {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NewIdentifierRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewIdentifierRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NewIdentifierRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.AutoPublish {
		i--
		if m.AutoPublish {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Method) > 0 {
		i -= len(m.Method)
		copy(dAtA[i:], m.Method)
		i = encodeVarintTrackingServerApi(dAtA, i, uint64(len(m.Method)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NewIdentifierResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewIdentifierResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NewIdentifierResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Document) > 0 {
		i -= len(m.Document)
		copy(dAtA[i:], m.Document)
		i = encodeVarintTrackingServerApi(dAtA, i, uint64(len(m.Document)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTrackingServerApi(dAtA []byte, offset int, v uint64) int {
	offset -= sovTrackingServerApi(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func NewPopulatedPingResponse(r randyTrackingServerApi, easy bool) *PingResponse {
	this := &PingResponse{}
	this.Ok = bool(bool(r.Intn(2) == 0))
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedTrackingServerApi(r, 2)
	}
	return this
}

func NewPopulatedActivationCodeRequest(r randyTrackingServerApi, easy bool) *ActivationCodeRequest {
	this := &ActivationCodeRequest{}
	this.Did = string(randStringTrackingServerApi(r))
	this.Role = string(randStringTrackingServerApi(r))
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedTrackingServerApi(r, 3)
	}
	return this
}

func NewPopulatedActivationCodeResponse(r randyTrackingServerApi, easy bool) *ActivationCodeResponse {
	this := &ActivationCodeResponse{}
	this.ActivationCode = string(randStringTrackingServerApi(r))
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedTrackingServerApi(r, 2)
	}
	return this
}

func NewPopulatedCredentialsRequest(r randyTrackingServerApi, easy bool) *CredentialsRequest {
	this := &CredentialsRequest{}
	this.Did = string(randStringTrackingServerApi(r))
	this.Role = string(randStringTrackingServerApi(r))
	this.ActivationCode = string(randStringTrackingServerApi(r))
	v1 := r.Intn(100)
	this.Proof = make([]byte, v1)
	for i := 0; i < v1; i++ {
		this.Proof[i] = byte(r.Intn(256))
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedTrackingServerApi(r, 5)
	}
	return this
}

func NewPopulatedRenewCredentialsRequest(r randyTrackingServerApi, easy bool) *RenewCredentialsRequest {
	this := &RenewCredentialsRequest{}
	this.RefreshCode = string(randStringTrackingServerApi(r))
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedTrackingServerApi(r, 2)
	}
	return this
}

func NewPopulatedCredentialsResponse(r randyTrackingServerApi, easy bool) *CredentialsResponse {
	this := &CredentialsResponse{}
	this.AccessToken = string(randStringTrackingServerApi(r))
	this.RefreshCode = string(randStringTrackingServerApi(r))
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedTrackingServerApi(r, 3)
	}
	return this
}

func NewPopulatedRecordRequest(r randyTrackingServerApi, easy bool) *RecordRequest {
	this := &RecordRequest{}
	if r.Intn(5) != 0 {
		v2 := r.Intn(5)
		this.Records = make([]*LocationRecord, v2)
		for i := 0; i < v2; i++ {
			this.Records[i] = NewPopulatedLocationRecord(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedTrackingServerApi(r, 2)
	}
	return this
}

func NewPopulatedRecordResponse(r randyTrackingServerApi, easy bool) *RecordResponse {
	this := &RecordResponse{}
	this.Ok = bool(bool(r.Intn(2) == 0))
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedTrackingServerApi(r, 2)
	}
	return this
}

func NewPopulatedNewIdentifierRequest(r randyTrackingServerApi, easy bool) *NewIdentifierRequest {
	this := &NewIdentifierRequest{}
	this.Method = string(randStringTrackingServerApi(r))
	this.AutoPublish = bool(bool(r.Intn(2) == 0))
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedTrackingServerApi(r, 3)
	}
	return this
}

func NewPopulatedNewIdentifierResponse(r randyTrackingServerApi, easy bool) *NewIdentifierResponse {
	this := &NewIdentifierResponse{}
	this.Document = string(randStringTrackingServerApi(r))
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedTrackingServerApi(r, 2)
	}
	return this
}

type randyTrackingServerApi interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneTrackingServerApi(r randyTrackingServerApi) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringTrackingServerApi(r randyTrackingServerApi) string {
	v3 := r.Intn(100)
	tmps := make([]rune, v3)
	for i := 0; i < v3; i++ {
		tmps[i] = randUTF8RuneTrackingServerApi(r)
	}
	return string(tmps)
}
func randUnrecognizedTrackingServerApi(r randyTrackingServerApi, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldTrackingServerApi(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldTrackingServerApi(dAtA []byte, r randyTrackingServerApi, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateTrackingServerApi(dAtA, uint64(key))
		v4 := r.Int63()
		if r.Intn(2) == 0 {
			v4 *= -1
		}
		dAtA = encodeVarintPopulateTrackingServerApi(dAtA, uint64(v4))
	case 1:
		dAtA = encodeVarintPopulateTrackingServerApi(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateTrackingServerApi(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateTrackingServerApi(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateTrackingServerApi(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateTrackingServerApi(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *PingResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ok {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ActivationCodeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Did)
	if l > 0 {
		n += 1 + l + sovTrackingServerApi(uint64(l))
	}
	l = len(m.Role)
	if l > 0 {
		n += 1 + l + sovTrackingServerApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ActivationCodeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ActivationCode)
	if l > 0 {
		n += 1 + l + sovTrackingServerApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CredentialsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Did)
	if l > 0 {
		n += 1 + l + sovTrackingServerApi(uint64(l))
	}
	l = len(m.Role)
	if l > 0 {
		n += 1 + l + sovTrackingServerApi(uint64(l))
	}
	l = len(m.ActivationCode)
	if l > 0 {
		n += 1 + l + sovTrackingServerApi(uint64(l))
	}
	l = len(m.Proof)
	if l > 0 {
		n += 1 + l + sovTrackingServerApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RenewCredentialsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RefreshCode)
	if l > 0 {
		n += 1 + l + sovTrackingServerApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CredentialsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AccessToken)
	if l > 0 {
		n += 1 + l + sovTrackingServerApi(uint64(l))
	}
	l = len(m.RefreshCode)
	if l > 0 {
		n += 1 + l + sovTrackingServerApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RecordRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Records) > 0 {
		for _, e := range m.Records {
			l = e.Size()
			n += 1 + l + sovTrackingServerApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RecordResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ok {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NewIdentifierRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Method)
	if l > 0 {
		n += 1 + l + sovTrackingServerApi(uint64(l))
	}
	if m.AutoPublish {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NewIdentifierResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Document)
	if l > 0 {
		n += 1 + l + sovTrackingServerApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovTrackingServerApi(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTrackingServerApi(x uint64) (n int) {
	return sovTrackingServerApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *PingResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PingResponse{`,
		`Ok:` + fmt.Sprintf("%v", this.Ok) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ActivationCodeRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ActivationCodeRequest{`,
		`Did:` + fmt.Sprintf("%v", this.Did) + `,`,
		`Role:` + fmt.Sprintf("%v", this.Role) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ActivationCodeResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ActivationCodeResponse{`,
		`ActivationCode:` + fmt.Sprintf("%v", this.ActivationCode) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CredentialsRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CredentialsRequest{`,
		`Did:` + fmt.Sprintf("%v", this.Did) + `,`,
		`Role:` + fmt.Sprintf("%v", this.Role) + `,`,
		`ActivationCode:` + fmt.Sprintf("%v", this.ActivationCode) + `,`,
		`Proof:` + fmt.Sprintf("%v", this.Proof) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RenewCredentialsRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RenewCredentialsRequest{`,
		`RefreshCode:` + fmt.Sprintf("%v", this.RefreshCode) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CredentialsResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CredentialsResponse{`,
		`AccessToken:` + fmt.Sprintf("%v", this.AccessToken) + `,`,
		`RefreshCode:` + fmt.Sprintf("%v", this.RefreshCode) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RecordRequest) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForRecords := "[]*LocationRecord{"
	for _, f := range this.Records {
		repeatedStringForRecords += strings.Replace(fmt.Sprintf("%v", f), "LocationRecord", "LocationRecord", 1) + ","
	}
	repeatedStringForRecords += "}"
	s := strings.Join([]string{`&RecordRequest{`,
		`Records:` + repeatedStringForRecords + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RecordResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RecordResponse{`,
		`Ok:` + fmt.Sprintf("%v", this.Ok) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NewIdentifierRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NewIdentifierRequest{`,
		`Method:` + fmt.Sprintf("%v", this.Method) + `,`,
		`AutoPublish:` + fmt.Sprintf("%v", this.AutoPublish) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NewIdentifierResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NewIdentifierResponse{`,
		`Document:` + fmt.Sprintf("%v", this.Document) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTrackingServerApi(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *PingResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTrackingServerApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PingResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PingResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ok", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrackingServerApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ok = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTrackingServerApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTrackingServerApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTrackingServerApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActivationCodeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTrackingServerApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActivationCodeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActivationCodeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Did", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrackingServerApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrackingServerApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTrackingServerApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Did = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Role", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrackingServerApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrackingServerApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTrackingServerApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Role = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTrackingServerApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTrackingServerApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTrackingServerApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActivationCodeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTrackingServerApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActivationCodeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActivationCodeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivationCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrackingServerApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrackingServerApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTrackingServerApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActivationCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTrackingServerApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTrackingServerApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTrackingServerApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CredentialsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTrackingServerApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CredentialsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CredentialsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Did", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrackingServerApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrackingServerApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTrackingServerApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Did = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Role", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrackingServerApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrackingServerApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTrackingServerApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Role = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivationCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrackingServerApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrackingServerApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTrackingServerApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActivationCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proof", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrackingServerApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTrackingServerApi
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTrackingServerApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proof = append(m.Proof[:0], dAtA[iNdEx:postIndex]...)
			if m.Proof == nil {
				m.Proof = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTrackingServerApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTrackingServerApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTrackingServerApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RenewCredentialsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTrackingServerApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RenewCredentialsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RenewCredentialsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefreshCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrackingServerApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrackingServerApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTrackingServerApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RefreshCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTrackingServerApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTrackingServerApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTrackingServerApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CredentialsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTrackingServerApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CredentialsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CredentialsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrackingServerApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrackingServerApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTrackingServerApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccessToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefreshCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrackingServerApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrackingServerApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTrackingServerApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RefreshCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTrackingServerApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTrackingServerApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTrackingServerApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RecordRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTrackingServerApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecordRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecordRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Records", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrackingServerApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTrackingServerApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTrackingServerApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Records = append(m.Records, &LocationRecord{})
			if err := m.Records[len(m.Records)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTrackingServerApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTrackingServerApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTrackingServerApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RecordResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTrackingServerApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecordResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecordResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ok", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrackingServerApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ok = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTrackingServerApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTrackingServerApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTrackingServerApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewIdentifierRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTrackingServerApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NewIdentifierRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NewIdentifierRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Method", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrackingServerApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrackingServerApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTrackingServerApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Method = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoPublish", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrackingServerApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AutoPublish = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTrackingServerApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTrackingServerApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTrackingServerApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewIdentifierResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTrackingServerApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NewIdentifierResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NewIdentifierResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Document", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrackingServerApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrackingServerApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTrackingServerApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Document = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTrackingServerApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTrackingServerApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTrackingServerApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTrackingServerApi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTrackingServerApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTrackingServerApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTrackingServerApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTrackingServerApi
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTrackingServerApi
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTrackingServerApi
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTrackingServerApi        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTrackingServerApi          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTrackingServerApi = fmt.Errorf("proto: unexpected end of group")
)
